import asyncio
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN
from aiogram.client.session.aiohttp import AiohttpSession

# ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from handlers import start, lang, menu, aviatickets

# üîÑ –°–±—Ä–æ—Å webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ –±–æ—Ç "–º–æ–ª—á–∏—Ç"
async def reset_webhook(bot: Bot):
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("‚úÖ Webhook —É–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ –±—ã–ª)")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")

async def main():
    bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
    dp = Dispatcher(storage=MemoryStorage())

    # ‚õîÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã Telegram
    await reset_webhook(bot)

    # üìå –†–æ—É—Ç–µ—Ä—ã
    dp.include_router(start.router)
    dp.include_router(lang.router)
    dp.include_router(menu.router)
    dp.include_router(aviatickets.router)

    # üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
